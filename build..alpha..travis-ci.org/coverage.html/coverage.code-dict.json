{"/home/travis/build/npmtest/node-npmtest-fis/test.js":"/* istanbul instrument in package npmtest_fis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fis/lib.npmtest_fis.js":"/* istanbul instrument in package npmtest_fis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_fis = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_fis = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-fis/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-fis && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_fis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_fis\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_fis.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_fis.rollup.js'] =\n            local.assetsDict['/assets.npmtest_fis.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_fis.__dirname + '/lib.npmtest_fis.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fis/node_modules/fis/fis.js":"/*\n * fis\n * http://fis.baidu.com/\n */\n\n'use strict';\n\n//kernel\nvar fis = module.exports = require('fis-kernel');\n\n//merge standard conf\nfis.config.merge({\n    modules : {\n        preprocessor: {\n            js: 'components',\n            css: 'components',\n            html: 'components'\n        },\n        postprocessor : {\n            js : 'jswrapper'\n        },\n        optimizer : {\n            js : 'uglify-js',\n            css : 'clean-css',\n            png : 'png-compressor'\n        },\n        spriter : 'csssprites',\n        packager : 'map',\n        deploy : 'default',\n        prepackager: 'derived'\n    }\n});\n\n//exports cli object\nfis.cli = {};\n\nfis.cli.name = 'fis';\n\n//colors\nfis.cli.colors = require('colors');\n\n//commander object\nfis.cli.commander = null;\n\n//package.json\nfis.cli.info = fis.util.readJSON(__dirname + '/package.json');\n\n//output help info\nfis.cli.help = function(){\n    var content = [\n        '',\n        '  Usage: ' + fis.cli.name + ' <command>',\n        '',\n        '  Commands:',\n        ''\n    ];\n\n    fis.cli.help.commands.forEach(function(name){\n        var cmd = fis.require('command', name);\n        name = cmd.name || name;\n        name = fis.util.pad(name, 12);\n        content.push('    ' + name + (cmd.desc || ''));\n    });\n\n    content = content.concat([\n        '',\n        '  Options:',\n        '',\n        '    -h, --help     output usage information',\n        '    -v, --version  output the version number',\n        '    --no-color     disable colored output',\n        ''\n    ]);\n    console.log(content.join('\\n'));\n};\n\nfis.cli.help.commands = [ 'release', 'install', 'server' ];\n\n//output version info\nfis.cli.version = function(){\n    var content = [\n        '',\n        '  v' + fis.cli.info.version,\n        '',\n        ' __' + '/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.bold.red + '__' + '/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.bold.yellow + '_____' + '/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.bold.green + '___',\n        '  _' + '\\\\/\\\\\\\\\\\\///////////'.bold.red + '__' + '\\\\/////\\\\\\\\\\\\///'.bold.yellow + '____' + '/\\\\\\\\\\\\/////////\\\\\\\\\\\\'.bold.green + '_' + '       ',\n        '   _' + '\\\\/\\\\\\\\\\\\'.bold.red + '_________________' + '\\\\/\\\\\\\\\\\\'.bold.yellow + '______' + '\\\\//\\\\\\\\\\\\'.bold.green + '______' + '\\\\///'.bold.green + '__',\n        '    _' + '\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.bold.red + '_________' + '\\\\/\\\\\\\\\\\\'.bold.yellow + '_______' + '\\\\////\\\\\\\\\\\\'.bold.green + '_________' + '     ',\n        '     _' + '\\\\/\\\\\\\\\\\\///////'.bold.red + '__________' + '\\\\/\\\\\\\\\\\\'.bold.yellow + '__________' + '\\\\////\\\\\\\\\\\\'.bold.green + '______' + '    ',\n        '      _' + '\\\\/\\\\\\\\\\\\'.bold.red + '_________________' + '\\\\/\\\\\\\\\\\\'.bold.yellow + '_____________' + '\\\\////\\\\\\\\\\\\'.bold.green + '___' + '   ',\n        '       _' + '\\\\/\\\\\\\\\\\\'.bold.red + '_________________' + '\\\\/\\\\\\\\\\\\'.bold.yellow + '______' + '/\\\\\\\\\\\\'.bold.green + '______' + '\\\\//\\\\\\\\\\\\'.bold.green + '__',\n        '        _' + '\\\\/\\\\\\\\\\\\'.bold.red + '______________' + '/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'.bold.yellow + '_' + '\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/'.bold.green + '___',\n        '         _' + '\\\\///'.bold.red + '______________' + '\\\\///////////'.bold.yellow + '____' + '\\\\///////////'.bold.green + '_____',\n        ''\n    ].join('\\n');\n    console.log(content);\n};\n\nfunction hasArgv(argv, search){\n    var pos = argv.indexOf(search);\n    var ret = false;\n    while(pos > -1){\n        argv.splice(pos, 1);\n        pos = argv.indexOf(search);\n        ret = true;\n    }\n    return ret;\n}\n\n//run cli tools\nfis.cli.run = function(argv){\n\n    fis.processCWD = process.cwd();\n\n    if(hasArgv(argv, '--no-color')){\n        fis.cli.colors.mode = 'none';\n    }\n\n    var first = argv[2];\n    if(argv.length < 3 || first === '-h' ||  first === '--help'){\n        fis.cli.help();\n    } else if(first === '-v' || first === '--version'){\n        fis.cli.version();\n    } else if(first[0] === '-'){\n        fis.cli.help();\n    } else {\n        //register command\n        var commander = fis.cli.commander = require('commander');\n        var cmd = fis.require('command', argv[2]);\n        cmd.register(\n            commander\n                .command(cmd.name || first)\n                .usage(cmd.usage)\n                .description(cmd.desc)\n        );\n        commander.parse(argv);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-fis/node_modules/fis-kernel/fis-kernel.js":"/*\n * fis\n * http://fis.baidu.com/\n */\n\n'use strict';\n\nvar last = Date.now();\n\n//oo\nFunction.prototype.derive = function(constructor, proto){\n    if(typeof constructor === 'object'){\n        proto = constructor;\n        constructor = proto.constructor || function(){};\n        delete proto.constructor;\n    }\n    var parent = this;\n    var fn = function(){\n        parent.apply(this, arguments);\n        constructor.apply(this, arguments);\n    };\n    var tmp = function(){};\n    tmp.prototype = parent.prototype;\n    var fp = new tmp(),\n        cp = constructor.prototype,\n        key;\n    for(key in cp){\n        if(cp.hasOwnProperty(key)){\n            fp[key] = cp[key];\n        }\n    }\n    proto = proto || {};\n    for(key in proto){\n        if(proto.hasOwnProperty(key)){\n            fp[key] = proto[key];\n        }\n    }\n    fp.constructor = constructor.prototype.constructor;\n    fn.prototype = fp;\n    return fn;\n};\n\n//factory\nFunction.prototype.factory = function(){\n    var clazz = this;\n    function F(args){\n        clazz.apply(this, args);\n    }\n    F.prototype = clazz.prototype;\n    return function(){\n        return new F(arguments);\n    };\n};\n\nvar fis = module.exports = {};\n\n//register global variable\nObject.defineProperty(global, 'fis', {\n    enumerable : true,\n    writable : false,\n    value : fis\n});\n\nfis.emitter = new (require('events').EventEmitter);\n\n//time for debug\nfis.time = function(title){\n    console.log(title + ' : ' + (Date.now() - last) + 'ms');\n    last = Date.now();\n};\n\n//log\nfis.log = require('./lib/log.js');\n\n//require\nfis.require = function(){\n    var path;\n    var name = Array.prototype.slice.call(arguments, 0).join('-');\n    if(fis.require._cache.hasOwnProperty(name)) return fis.require._cache[name];\n    var names = [];\n    for(var i = 0, len = fis.require.prefixes.length; i < len; i++){\n        try {\n            var pluginName = fis.require.prefixes[i] + '-' + name;\n            names.push(pluginName);\n            path = require.resolve(pluginName);\n            try {\n                return fis.require._cache[name] = require(pluginName);\n            } catch (e){\n                fis.log.error('load plugin [' + pluginName + '] error : ' + e.message);\n            }\n        } catch (e){\n            if (e.code !== 'MODULE_NOT_FOUND') {\n                throw e;\n            }\n        }\n    }\n    fis.log.error('unable to load plugin [' + names.join('] or [') + ']');\n};\n\nfis.require._cache = {};\n\nfis.require.prefixes = ['fis'];\n\n//system config\nfis.config = require('./lib/config.js');\n\n//utils\nfis.util = require('./lib/util.js');\n\n//resource location\nfis.uri = require('./lib/uri.js');\n\n//project\nfis.project = require('./lib/project.js');\n\n//file\nfis.file = require('./lib/file.js');\n\n//cache\nfis.cache = require('./lib/cache.js');\n\n//compile kernel\nfis.compile = require('./lib/compile.js');\n\n//release api\nfis.release = require('./lib/release.js');\n\n//package info\nfis.info = fis.util.readJSON(__dirname + '/package.json');\n\n//kernel version\nfis.version = fis.info.version;\n","/home/travis/build/npmtest/node-npmtest-fis/node_modules/fis-kernel/lib/log.js":"/*\n * fis\n * http://fis.baidu.com/\n */\n\n'use strict';\n\nexports.L_ALL    = 0x01111;\nexports.L_NOTIC  = 0x00001;\nexports.L_DEBUG  = 0x00010;\nexports.L_WARNI  = 0x00100;\nexports.L_ERROR  = 0x01000;\nexports.L_NORMAL = 0x01101;\n\nexports.level = exports.L_NORMAL;\nexports.throw = false;\nexports.alert = false;\n\nexports.now = function(withoutMilliseconds){\n    var d = new Date(), str;\n    str = [\n        d.getHours(),\n        d.getMinutes(),\n        d.getSeconds()\n    ].join(':').replace(/\\b\\d\\b/g, '0$&');\n    if(!withoutMilliseconds){\n        str += '.' + ('00' + d.getMilliseconds()).substr(-4);\n    }\n    return str;\n};\n\nfunction log(type, msg, code){\n    code = code || 0;\n    if((exports.level & code) > 0){\n        var listener = exports.on[type];\n        if(listener){\n            listener(msg);\n        }\n        exports.on.any(type, msg);\n    }\n}\n\nexports.debug = function(msg){\n    log('debug', exports.now() + ' ' + msg, exports.L_DEBUG);\n};\n\nexports.notice = function(msg){\n    log('notice', msg, exports.L_NOTIC);\n};\n\nexports.warning = function(msg){\n    log('warning', msg, exports.L_WARNI);\n};\n\nexports.error = function(err){\n    if(!(err instanceof Error)){\n        err = new Error(err.message || err);\n    }\n    if(exports.alert){\n        err.message += '\\u0007';\n    }\n    if(exports.throw){\n        throw err\n    } else {\n        log('error', err.message, exports.L_ERROR);\n        process.exit(1);\n    }\n};\n\nexports.on = {\n    any     : function(type, msg){},\n    debug   : function(msg){ process.stdout.write('\\n [DEBUG] ' + msg + '\\n'); },\n    notice  : function(msg){ process.stdout.write('\\n [NOTIC] ' + msg + '\\n'); },\n    warning : function(msg){ process.stdout.write('\\n [WARNI] ' + msg + '\\n'); },\n    error   : function(msg){ process.stdout.write('\\n [ERROR] ' + msg + '\\n'); }\n};","/home/travis/build/npmtest/node-npmtest-fis/node_modules/fis-kernel/lib/config.js":"/*\n * fis\n * http://fis.baidu.com/\n */\n\n'use strict';\n\nvar DEFALUT_SETTINGS = {\n    system : {\n        repos : 'http://fis.baidu.com/repos'\n    },\n    project : {\n        charset : 'utf8',\n        md5Length : 7,\n        md5Connector : '_'\n    }\n};\n\n//You can't use merge in util.js\nfunction merge(source, target){\n    if(typeof source === 'object' && typeof target === 'object'){\n        for(var key in target){\n            if(target.hasOwnProperty(key)){\n                source[key] = merge(source[key], target[key]);\n            }\n        }\n    } else {\n        source = target;\n    }\n    return source;\n}\n\nvar Config = Object.derive({\n    constructor : function(){\n        this.init.apply(this, arguments);\n    },\n    init : function(){\n        this.data = {};\n        if(arguments.length > 0){\n            this.merge.apply(this, arguments);\n        }\n        return this;\n    },\n    get : function(path, def){\n        var result = this.data || {};\n        (path || '').split('.').forEach(function(key){\n            if(key && (typeof result !== 'undefined')){\n                result = result[key];\n            }\n        });\n        if(typeof result === 'undefined'){\n            return def;\n        } else {\n            return result;\n        }\n    },\n    set : function(path, value){\n        if(typeof value === 'undefined'){\n            this.data = path;\n        } else {\n            path = String(path || '').trim();\n            if(path){\n                var paths = path.split('.'),\n                    last = paths.pop(),\n                    data = this.data || {};\n                paths.forEach(function(key){\n                    var type = typeof data[key];\n                    if(type === 'object'){\n                        data = data[key];\n                    } else if(type === 'undefined'){\n                        data = data[key] = {};\n                    } else {\n                        fis.log.error('forbidden to set property[' + key + '] of [' + type + '] data');\n                    }\n                });\n                data[last] = value;\n            }\n        }\n        return this;\n    },\n    del : function(path){\n        path = String(path || '').trim();\n        if(path){\n            var paths = path.split('.'),\n                data = this.data,\n                last = paths.pop(), key;\n            for(var i = 0, len = paths.length; i < len; i++){\n                key = paths[i];\n                if(typeof data[key] === 'object'){\n                    data = data[key];\n                } else {\n                    return this;\n                }\n            }\n            if(typeof data[last] !== 'undefined'){\n                delete data[last];\n            }\n        }\n        return this;\n    },\n    merge : function(){\n        var self = this;\n        [].slice.call(arguments).forEach(function(arg){\n            if(typeof arg === 'object'){\n                merge(self.data, arg);\n            } else {\n                fis.log.warning('unable to merge data[' + arg + '].');\n            }\n        });\n        return this;\n    },\n    require : function(name){\n        fis.require('config', name);\n        return this;\n    }\n});\n\nmodule.exports = (new Config).init(DEFALUT_SETTINGS);\nmodule.exports.Config = Config;","/home/travis/build/npmtest/node-npmtest-fis/node_modules/fis-kernel/lib/util.js":"/*\n * fis\n * http://fis.baidu.com/\n */\n\n'use strict';\n\nvar fs = require('fs'),\n    pth = require('path'),\n    crypto = require('crypto'),\n    Url = require('url'),\n    _exists = fs.existsSync || pth.existsSync,\n    toString = Object.prototype.toString,\n    iconv, tar;\n\nvar IS_WIN = process.platform.indexOf('win') === 0;\n\nvar TEXT_FILE_EXTS = [\n        'css', 'tpl', 'js', 'php',\n        'txt', 'json', 'xml', 'htm',\n        'text', 'xhtml', 'html', 'md',\n        'conf', 'po', 'config', 'tmpl',\n        'coffee', 'less', 'sass', 'jsp',\n        'scss', 'manifest', 'bak', 'asp',\n        'tmp', 'haml', 'jade', 'aspx',\n        'ashx', 'java', 'py', 'c', 'cpp',\n        'h', 'cshtml', 'asax', 'master',\n        'ascx', 'cs', 'ftl', 'vm', 'ejs',\n        'styl', 'jsx', 'handlebars'\n    ],\n    IMAGE_FILE_EXTS = [\n        'svg', 'tif', 'tiff', 'wbmp',\n        'png', 'bmp', 'fax', 'gif',\n        'ico', 'jfif', 'jpe', 'jpeg',\n        'jpg', 'woff', 'cur', 'webp',\n        'swf', 'ttf', 'eot', 'woff2'\n    ],\n    MIME_MAP = {\n        //text\n        'css' : 'text/css',\n        'tpl' : 'text/html',\n        'js' : 'text/javascript',\n        'jsx' : 'text/javascript',\n        'php' : 'text/html',\n        'asp' : 'text/html',\n        'jsp' : 'text/jsp',\n        'txt' : 'text/plain',\n        'json' : 'application/json',\n        'xml' : 'text/xml',\n        'htm' : 'text/html',\n        'text' : 'text/plain',\n        'md' : 'text/plain',\n        'xhtml' : 'text/html',\n        'html' : 'text/html',\n        'conf' : 'text/plain',\n        'po' : 'text/plain',\n        'config' : 'text/plain',\n        'coffee' : 'text/javascript',\n        'less' : 'text/css',\n        'sass' : 'text/css',\n        'scss' : 'text/css',\n        'styl' : 'text/css',\n        'manifest' : 'text/cache-manifest',\n        //image\n        'svg' : 'image/svg+xml',\n        'tif' : 'image/tiff',\n        'tiff' : 'image/tiff',\n        'wbmp' : 'image/vnd.wap.wbmp',\n        'webp' : 'image/webp',\n        'png' : 'image/png',\n        'bmp' : 'image/bmp',\n        'fax' : 'image/fax',\n        'gif' : 'image/gif',\n        'ico' : 'image/x-icon',\n        'jfif' : 'image/jpeg',\n        'jpg' : 'image/jpeg',\n        'jpe' : 'image/jpeg',\n        'jpeg' : 'image/jpeg',\n        'eot' : 'application/vnd.ms-fontobject',\n        'woff' : 'application/font-woff',\n        'woff2' : 'application/font-woff',\n        'ttf' : 'application/octet-stream',\n        'cur' : 'application/octet-stream'\n    };\n\nfunction getIconv(){\n    if(!iconv){\n        iconv = require('iconv-lite');\n    }\n    return iconv;\n}\n\nfunction getTar(){\n    if(!tar){\n        tar = require('tar');\n    }\n    return tar;\n}\n\nvar _ = module.exports = function(path){\n    var type = typeof path;\n        if(arguments.length > 1) {\n            path = Array.prototype.join.call(arguments, '/');\n        } else if(type === 'string') {\n            //do nothing for quickly determining.\n        } else if(type === 'object') {\n            path = Array.prototype.join.call(path, '/');\n        } else if(type === 'undefined') {\n            path = '';\n        }\n        if(path){\n            path = pth.normalize(path.replace(/[\\/\\\\]+/g, '/')).replace(/\\\\/g, '/');\n            if(path !== '/'){\n                path = path.replace(/\\/$/, '');\n            }\n        }\n        return path;\n};\n\n_.is = function(source, type){\n    return toString.call(source) === '[object ' + type + ']';\n};\n\n_.map = function(obj, callback, merge){\n    var index = 0;\n    for(var key in obj){\n        if(obj.hasOwnProperty(key)){\n            if(merge){\n                callback[key] = obj[key];\n            } else if(callback(key, obj[key], index++)) {\n                break;\n            }\n        }\n    }\n};\n\n_.pad = function(str, len, fill, pre){\n    if(str.length < len){\n        fill = (new Array(len)).join(fill || ' ');\n        if(pre){\n            str = (fill + str).substr(-len);\n        } else {\n            str = (str + fill).substring(0, len);\n        }\n    }\n    return str;\n};\n\n_.merge = function(source, target){\n    if(_.is(source, 'Object') && _.is(target, 'Object')){\n        _.map(target, function(key, value){\n            source[key] = _.merge(source[key], value);\n        });\n    } else {\n        source = target;\n    }\n    return source;\n};\n\n_.clone = function(source) {\n    var ret;\n    switch(toString.call(source)){\n        case '[object Object]':\n            ret = {};\n            _.map(source, function(k, v){\n                ret[k] = _.clone(v);\n            });\n            break;\n        case '[object Array]':\n            ret = [];\n            source.forEach(function(ele){\n                ret.push(_.clone(ele));\n            });\n            break;\n        default :\n            ret = source;\n    }\n    return ret;\n};\n\n_.escapeReg = function(str){\n    return str.replace(/[\\.\\\\\\+\\*\\?\\[\\^\\]\\$\\(\\){}=!<>\\|:\\/]/g, '\\\\$&');\n};\n\n_.escapeShellCmd = function(str){\n    return str.replace(/ /g, '\"$&\"');\n};\n\n_.escapeShellArg = function(cmd){\n    return '\"' + cmd + '\"';\n};\n\n_.stringQuote = function(str, quotes){\n    var info = {\n        origin : str,\n        rest   : str = str.trim(),\n        quote  : ''\n    };\n    if(str){\n        quotes = quotes || '\\'\"';\n        var strLen = str.length - 1;\n        for(var i = 0, len = quotes.length; i < len; i++){\n            var c = quotes[i];\n            if(str[0] === c && str[strLen] === c){\n                info.quote = c;\n                info.rest  = str.substring(1, strLen);\n                break;\n            }\n        }\n    }\n    return info;\n};\n\n_.getMimeType = function(ext){\n    if(ext[0] === '.'){\n        ext = ext.substring(1);\n    }\n    return MIME_MAP[ext] || 'application/x-' + ext;\n};\n\n_.exists = _exists;\n_.fs = fs;\n\n_.realpath = function(path){\n    if(path && _exists(path)){\n        path = fs.realpathSync(path);\n        if(IS_WIN){\n            path = path.replace(/\\\\/g, '/');\n        }\n        if(path !== '/'){\n            path = path.replace(/\\/$/, '');\n        }\n        return path;\n    } else {\n        return false;\n    }\n};\n\n_.realpathSafe = function(path){\n    return _.realpath(path) || _(path);\n};\n\n_.isAbsolute = function(path) {\n    if (IS_WIN) {\n        return /^[a-z]:/i.test(path);\n    } else {\n        if(path === '/'){\n            return true;\n        } else {\n            var split = path.split('/');\n            if(split[0] === '~'){\n                return true;\n            } else if(split[0] === '' && split[1]) {\n                return _.isDir('/' + split[1] + '/' + split[2]);\n            } else {\n                return false;\n            }\n        }\n    }\n};\n\n_.isFile = function(path){\n    return _exists(path) && fs.statSync(path).isFile();\n};\n\n_.isDir = function(path){\n    return _exists(path) && fs.statSync(path).isDirectory();\n};\n\n_.mtime = function(path){\n    var time = 0;\n    if(_exists(path)){\n        time = fs.statSync(path).mtime;\n    }\n    return time;\n};\n\n_.touch = function(path, mtime){\n    if(!_exists(path)){\n        _.write(path, '');\n    }\n    if(mtime instanceof Date){\n        //do nothing for quickly determining.\n    } else if(typeof mtime === 'number') {\n        var time = new Date();\n        time.setTime(mtime);\n        mtime = time;\n    } else {\n        fis.log.error('invalid argument [mtime]');\n    }\n    fs.utimesSync(path, mtime, mtime);\n};\n\n_.isWin = function(){\n    return IS_WIN;\n};\n\nfunction getFileTypeReg(type){\n    var map = [], ext = fis.config.get('project.fileType.' + type);\n    if(type === 'text'){\n        map = TEXT_FILE_EXTS;\n    } else if(type === 'image'){\n        map = IMAGE_FILE_EXTS;\n    } else {\n        fis.log.error('invalid file type [' + type + ']');\n    }\n    if(ext && ext.length){\n        if(typeof ext === 'string'){\n            ext = ext.split(/\\s*,\\s*/);\n        }\n        map = map.concat(ext);\n    }\n    map = map.join('|');\n    return new RegExp('\\\\.(?:' + map + ')$', 'i');\n}\n\n_.isTextFile = function(path){\n    return getFileTypeReg('text').test(path || '');\n};\n\n_.isImageFile = function(path){\n    return getFileTypeReg('image').test(path || '');\n};\n\n_.md5 = function(data, len){\n    var md5sum = crypto.createHash('md5'),\n        encoding = typeof data === 'string' ? 'utf8' : 'binary';\n    md5sum.update(data, encoding);\n    len = len || fis.config.get('project.md5Length', 7);\n    return md5sum.digest('hex').substring(0, len);\n};\n\n_.base64 = function(data){\n    if(data instanceof Buffer){\n        //do nothing for quickly determining.\n    } else if(data instanceof Array){\n        data = new Buffer(data);\n    } else {\n        //convert to string.\n        data = new Buffer(String(data || ''));\n    }\n    return data.toString('base64');\n};\n\n_.mkdir = function(path, mode){\n    if (typeof mode === 'undefined') {\n        //511 === 0777\n        mode = 511 & (~process.umask());\n    }\n    if(_exists(path)) return;\n    path.split('/').reduce(function(prev, next) {\n        if(prev && !_exists(prev)) {\n            fs.mkdirSync(prev, mode);\n        }\n        return prev + '/' + next;\n    });\n    if(!_exists(path)) {\n        fs.mkdirSync(path, mode);\n    }\n};\n\n_.toEncoding = function(str, encoding){\n    return getIconv().toEncoding(String(str), encoding);\n};\n\n_.isUtf8 = function(bytes) {\n    var i = 0;\n    while(i < bytes.length) {\n        if((// ASCII\n            0x00 <= bytes[i] && bytes[i] <= 0x7F\n        )) {\n            i += 1;\n            continue;\n        }\n        \n        if((// non-overlong 2-byte\n            (0xC2 <= bytes[i] && bytes[i] <= 0xDF) &&\n            (0x80 <= bytes[i+1] && bytes[i+1] <= 0xBF)\n        )) {\n            i += 2;\n            continue;\n        }\n        \n        if(\n            (// excluding overlongs\n                bytes[i] == 0xE0 &&\n                (0xA0 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n                (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF)\n            ) || (// straight 3-byte\n                ((0xE1 <= bytes[i] && bytes[i] <= 0xEC) ||\n                bytes[i] == 0xEE ||\n                bytes[i] == 0xEF) &&\n                (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n                (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF)\n            ) || (// excluding surrogates\n                bytes[i] == 0xED &&\n                (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0x9F) &&\n                (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF)\n            )\n        ) {\n            i += 3;\n            continue;\n        }\n        \n        if(\n            (// planes 1-3\n                bytes[i] == 0xF0 &&\n                (0x90 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n                (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n                (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n            ) || (// planes 4-15\n                (0xF1 <= bytes[i] && bytes[i] <= 0xF3) &&\n                (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n                (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n                (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n            ) || (// plane 16\n                bytes[i] == 0xF4 &&\n                (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0x8F) &&\n                (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n                (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n            )\n        ) {\n            i += 4;\n            continue;\n        }\n        return false;\n    }\n    return true;\n};\n\n_.readBuffer = function(buffer){\n    if(_.isUtf8(buffer)){\n        buffer = buffer.toString('utf8');\n        if (buffer.charCodeAt(0) === 0xFEFF) {\n            buffer = buffer.substring(1);\n        }\n    } else {\n        buffer = getIconv().decode(buffer, 'gbk');\n    }\n    return buffer;\n};\n\n_.read = function(path, convert){\n    var content = false;\n    if(_exists(path)){\n        content = fs.readFileSync(path);\n        if(convert || _.isTextFile(path)){\n            content = _.readBuffer(content);\n        }\n    } else {\n        fis.log.error('unable to read file[' + path + ']: No such file or directory.');\n    }\n    return content;\n};\n\n_.write = function(path, data, charset, append){\n    if(!_exists(path)){\n        _.mkdir(_.pathinfo(path).dirname);\n    }\n    if(charset){\n        data = getIconv().encode(data, charset);\n    }\n    if(append) {\n        fs.appendFileSync(path, data, null);\n    } else {\n        fs.writeFileSync(path, data, null);\n    }\n};\n\n_.filter = function(str, include, exclude){\n\n    function normalize(pattern){\n        var type = toString.call(pattern);\n        switch (type){\n            case '[object String]':\n                return _.glob(pattern);\n            case '[object RegExp]':\n                return pattern;\n            default:\n                fis.log.error('invalid regexp [' + pattern + '].');\n        }\n    }\n\n    function match(str, patterns){\n        var matched = false;\n        if (!_.is(patterns, 'Array')){\n            patterns = [patterns];\n        }\n        patterns.every(function(pattern){\n            if (!pattern){\n                return true;\n            }\n            matched = matched || str.search(normalize(pattern)) > -1;\n            return !matched;\n        });\n        return matched;\n    }\n\n    var isInclude, isExclude;\n\n    if (include) {\n        isInclude = match(str, include);\n    }else{\n        isInclude = true;\n    }\n\n    if (exclude) {\n        isExclude = match(str, exclude);\n    }\n\n    return isInclude && !isExclude;\n};\n\n_.find = function(rPath, include, exclude, root){\n    var list = [],\n        path = _.realpath(rPath),\n        filterPath = root ? path.substring(root.length) : path;\n    if(path){\n        var stat = fs.statSync(path);\n        if(stat.isDirectory() && (include || _.filter(filterPath, include, exclude))){\n            fs.readdirSync(path).forEach(function(p){\n                if(p[0] != '.') {\n                    list = list.concat(_.find(path + '/' + p, include, exclude, root));\n                }\n            });\n        } else if(stat.isFile() && _.filter(filterPath, include, exclude)) {\n            list.push(path);\n        }\n    } else {\n        fis.log.error('unable to find [' + rPath + ']: No such file or directory.');\n    }\n    return list.sort();\n};\n\n_.del = function(rPath, include, exclude){\n    var removedAll = true;\n    var path;\n    if(rPath && _.exists(rPath)) {\n        var stat = fs.lstatSync(rPath);\n        var isFile = stat.isFile() || stat.isSymbolicLink();\n\n        if (stat.isSymbolicLink()) {\n            path = rPath;\n        } else {\n            path = _.realpath(rPath);\n        }\n\n        if(/^(?:\\w:)?\\/$/.test(path)){\n            fis.log.error('unable to delete directory [' + rPath + '].');\n        }\n        \n        if(stat.isDirectory()){\n            fs.readdirSync(path).forEach(function(name){\n                if(name != '.' && name != '..') {\n                    removedAll = _.del(path + '/' + name, include, exclude) && removedAll;\n                }\n            });\n            if(removedAll) {\n                fs.rmdirSync(path);\n            }\n        } else if(isFile && _.filter(path, include, exclude)) {\n            fs.unlinkSync(path);\n        } else {\n            removedAll = false;\n        }\n    } else {\n        //fis.log.error('unable to delete [' + rPath + ']: No such file or directory.');\n    }\n    return removedAll;\n};\n\n_.copy = function(rSource, target, include, exclude, uncover, move){\n    var removedAll = true,\n        source = _.realpath(rSource);\n    target = _(target);\n    if(source){\n        var stat = fs.statSync(source);\n        if(stat.isDirectory()){\n            fs.readdirSync(source).forEach(function(name){\n                if(name != '.' && name != '..') {\n                    removedAll = _.copy(\n                        source + '/' + name,\n                        target + '/' + name,\n                        include, exclude,\n                        uncover, move\n                    ) && removedAll;\n                }\n            });\n            if(move && removedAll) {\n                fs.rmdirSync(source);\n            }\n        } else if(stat.isFile() && _.filter(source, include, exclude)){\n            if(uncover && _exists(target)){\n                //uncover\n                removedAll = false;\n            } else {\n                _.write(target, fs.readFileSync(source, null));\n                if(move) {\n                    fs.unlinkSync(source);\n                }\n            }\n        } else {\n            removedAll = false;\n        }\n    } else {\n        fis.log.error('unable to copy [' + rSource + ']: No such file or directory.');\n    }\n    return removedAll;\n};\n\n_.ext = function(str){\n    var info = _.query(str), pos;\n    str = info.fullname = info.rest;\n    if((pos = str.lastIndexOf('/')) > -1){\n        if(pos === 0){\n            info.rest = info.dirname = '/';\n        } else {\n            info.dirname = str.substring(0, pos);\n            info.rest = info.dirname + '/';\n        }\n        str = str.substring(pos + 1);\n    } else {\n        info.rest = info.dirname = '';\n    }\n    if((pos = str.lastIndexOf('.')) > -1){\n        info.ext = str.substring(pos).toLowerCase();\n        info.filename = str.substring(0, pos);\n        info.basename = info.filename + info.ext;\n    } else {\n        info.basename = info.filename = str;\n        info.ext = '';\n    }\n    info.rest += info.filename;\n    return info;\n};\n\n_.query = function(str){\n    var rest = str,\n        pos = rest.indexOf('#'),\n        hash = '',\n        query = '';\n    if(pos > -1){\n        hash = rest.substring(pos);\n        rest  = rest.substring(0, pos);\n    }\n    pos = rest.indexOf('?');\n    if(pos > -1){\n        query = rest.substring(pos);\n        rest  = rest.substring(0, pos);\n    }\n    rest = rest.replace(/\\\\/g, '/');\n    if(rest !== '/'){\n        rest = rest.replace(/\\/\\.?$/, '');\n    }\n    return {\n        origin : str,\n        rest : rest,\n        hash : hash,\n        query : query\n    };\n};\n\n_.pathinfo = function(path){\n    //can not use _() method directly for the case _.pathinfo('a/').\n    var type = typeof path;\n    if(arguments.length > 1) {\n        path = Array.prototype.join.call(arguments, '/');\n    } else if(type === 'string') {\n        //do nothing for quickly determining.\n    } else if(type === 'object') {\n        path = Array.prototype.join.call(path, '/');\n    }\n    return _.ext(path);\n};\n\n_.camelcase = function(str){\n    var ret = '';\n    if(str){\n        str.split(/[-_ ]+/).forEach(function(ele){\n            ret += ele[0].toUpperCase() + ele.substring(1);\n        });\n    } else {\n        ret = str;\n    }\n    return ret;\n};\n\n_.pipe = function(type, callback, def){\n    var processors = fis.config.get('modules.' + type, def);\n    if(processors){\n        var typeOf = typeof processors;\n        if(typeOf === 'string'){\n            processors = processors.trim().split(/\\s*,\\s*/);\n        } else if(typeOf === 'function'){\n            processors = [ processors ];\n        }\n        type = type.split('.')[0];\n        processors.forEach(function(processor, index){\n            var typeOf = typeof processor, key;\n            if(typeOf === 'string'){\n                key = type + '.' + processor;\n                processor = fis.require(type, processor);\n            } else {\n                key = type + '.' + index;\n            }\n            if(typeof processor === 'function'){\n                var settings = fis.config.get('settings.' + key, {});\n                if(processor.defaultOptions){\n                    settings = _.merge(processor.defaultOptions, settings);\n                }\n                callback(processor, settings, key);\n            } else {\n                fis.log.warning('invalid processor [modules.' + key + ']');\n            }\n        });\n    }\n};\n\n_.parseUrl = function(url, opt){\n    opt = opt || {};\n    url = Url.parse(url);\n    var ssl = url.protocol === 'https:';\n    opt.host = opt.host\n        || opt.hostname\n        || ((ssl || url.protocol === 'http:') ? url.hostname : 'localhost');\n    opt.port = opt.port || (url.port || (ssl ? 443 : 80));\n    opt.path = opt.path || (url.pathname + (url.search ? url.search : ''));\n    opt.method = opt.method || 'GET';\n    opt.agent = opt.agent || false;\n    return opt;\n};\n\n_.download = function(url, callback, extract, opt){\n    opt  = _.parseUrl(url, opt || {});\n    var http = opt.protocol === 'https:' ? require('https') : require('http'),\n        name = _.md5(url, 8) + _.ext(url).ext,\n        tmp  = fis.project.getTempPath('downloads', name),\n        data = opt.data;\n    delete opt.data;\n    _.write(tmp, '');\n    var writer = fs.createWriteStream(tmp),\n        http_err_handler = function(err){\n            writer.destroy();\n            fs.unlinkSync(tmp);\n            var msg = typeof err === 'object' ? err.message : err;\n            if(callback){\n                callback(msg);\n            } else {\n                fis.log.error('request error [' + msg + ']');\n            }\n        },\n        req = http.request(opt, function(res){\n            var status = res.statusCode;\n            res\n                .on('data', function(chunk){\n                    writer.write(chunk);\n                })\n                .on('end', function(){\n                    if(status >= 200 && status < 300 || status === 304){\n                        if(extract){\n                            fs\n                                .createReadStream(tmp)\n                                .pipe(getTar().Extract({ path : extract }))\n                                .on('error', function(err){\n                                    if(callback){\n                                        callback(err);\n                                    } else {\n                                        fis.log.error('extract tar file [' + tmp + '] fail, error [' + err + ']');\n                                    }\n                                })\n                                .on('end', function(){\n                                    if(callback && (typeof callback(null, tmp, res) === 'undefined')){\n                                        fs.unlinkSync(tmp);\n                                    }\n                                });\n                        } else if(callback && (typeof callback(null, tmp, res) === 'undefined')){\n                            fs.unlinkSync(tmp);\n                        }\n                    } else {\n                        http_err_handler(status);\n                    }\n                })\n                .on('error', http_err_handler);\n        });\n    req.on('error', http_err_handler);\n    if(data){\n        req.write(data);\n    }\n    req.end();\n};\n\n_.upload = function(url, opt, data, content, subpath, callback){\n    if(typeof content === 'string'){\n        content = new Buffer(content, 'utf8');\n    } else if(!(content instanceof  Buffer)){\n        fis.log.error('unable to upload content [' + (typeof content) + ']');\n    }\n    data = data || {};\n    var endl = '\\r\\n';\n    var boundary = '-----np' + Math.random();\n    var collect = [];\n    _.map(data, function(key, value){\n        collect.push('--' + boundary + endl);\n        collect.push('Content-Disposition: form-data; name=\"' + key + '\"' + endl);\n        collect.push(endl);\n        collect.push(value + endl);\n    });\n    collect.push('--' + boundary + endl);\n    collect.push('Content-Disposition: form-data; name=\"file\"; filename=\"' + subpath + '\"' + endl);\n    collect.push(endl);\n    collect.push(content);\n    collect.push('--' + boundary + '--' + endl);\n    \n    var length = 0;\n    collect.forEach(function(ele){\n        length += ele.length;\n    });\n    \n    opt = opt || {};\n    opt.method = opt.method || 'POST';\n    opt.headers = {\n        'Content-Type': 'multipart/form-data; boundary=' + boundary,\n        'Content-Length': length\n    };\n    opt = _.parseUrl(url, opt);\n    var http = opt.protocol === 'https:' ? require('https') : require('http');\n    var req = http.request(opt, function(res){\n        var status = res.statusCode;\n        var body = '';\n        res\n            .on('data', function(chunk){\n                body += chunk;\n            })\n            .on('end', function(){\n                if(status >= 200 && status < 300 || status === 304){\n                    callback(null, body);\n                } else {\n                    callback(status);\n                }\n            })\n            .on('error', function(err){\n                callback(err.message || err);\n            });\n    });\n    collect.forEach(function(d){\n        req.write(d);\n        if(d instanceof Buffer){\n            req.write(endl);\n        }\n    });\n    req.end();\n};\n\n_.install = function (name, version, opt){\n    version = version === '*' ? 'latest' : ( version || 'latest' );\n    var remote = opt.remote.replace(/^\\/$/, '');\n    var url = remote + '/' + name + '/' + version + '.tar';\n    var extract = opt.extract || process.cwd();\n    if(opt.before){\n        opt.before(name, version);\n    }\n    _.download(url, function(err){\n        if(err){\n            if(opt.error){\n                opt.error(err);\n            } else {\n                fis.log.error( 'unable to download component [' +\n                    name + '@' + version + '] from [' + url + '], error [' + err + ']');\n            }\n        } else {\n            if(opt.done){\n                opt.done(name, version);\n            }\n            process.stdout.write('install [' + name + '@' + version + ']\\n');\n            var pkg = _(extract, 'package.json');\n            if(_.isFile(pkg)){\n                var info = _.readJSON(pkg);\n                fs.unlinkSync(pkg);\n                _.map(info.dependencies || {}, function(depName, depVersion){\n                    _.install(depName, depVersion, opt);\n                });\n            }\n        }\n    }, extract);\n};\n\n_.readJSON = function(path){\n    var json = _.read(path),\n        result = {};\n    try {\n        result = JSON.parse(json);\n    } catch(e){\n        fis.log.error('parse json file[' + path + '] fail, error [' + e.message + ']');\n    }\n    return result;\n};\n\n_.glob = function(pattern, str){\n    var sep = _.escapeReg('/');\n    pattern = new RegExp('^' + sep + '?' +\n        _.escapeReg(\n                pattern\n                    .replace(/\\\\/g, '/')\n                    .replace(/^\\//, '')\n            )\n            .replace(new RegExp(sep + '\\\\*\\\\*' + sep, 'g'), sep + '.*(?:' + sep + ')?')\n            .replace(new RegExp(sep + '\\\\*\\\\*', 'g'), sep + '.*')\n            .replace(/\\\\\\*\\\\\\*/g, '.*')\n            .replace(/\\\\\\*/g, '[^' + sep + ']*')\n            .replace(/\\\\\\?/g, '[^' + sep + ']') + '$',\n        'i'\n    );\n    if(typeof str === 'string'){\n        return pattern.test(str);\n    } else {\n        return pattern;\n    }\n};\n\n_.nohup = function(cmd, options, callback){\n    if(typeof options === 'function'){\n        callback = options;\n        options = null;\n    }\n    var exec = require('child_process').exec;\n    if(IS_WIN){\n        var cmdEscape = cmd.replace(/\"/g, '\"\"'),\n            file = fis.project.getTempPath('nohup-' + _.md5(cmd) + '.vbs'),\n            script = '';\n        script += 'Dim shell\\n';\n        script += 'Set shell = Wscript.CreateObject(\"WScript.Shell\")\\n';\n        script += 'ret = shell.Run(\"cmd.exe /c start /b ' + cmdEscape + '\", 0, TRUE)\\n';\n        script += 'WScript.StdOut.Write(ret)\\n';\n        script += 'Set shell = NoThing';\n        _.write(file, script);\n        return exec('cscript.exe /nologo \"' + file + '\"', options, function(error, stdout){\n            if(stdout != '0'){\n                fis.log.error('exec command[' + cmd + '] fail.');\n            }\n            fs.unlinkSync(file);\n            if(typeof callback === 'function') {\n                callback();\n            }\n        });\n    } else {\n        return exec('nohup ' + cmd + ' > /dev/null 2>&1 &', options, function(error, stdout){\n            if(error !== null) {\n                fis.log.error('exec command[' + cmd + '] fail, stdout [' + stdout + '].');\n            }\n            if(typeof callback === 'function') {\n                callback();\n            }\n        });\n    }\n};\n\n_.isEmpty = function (obj) {\n    if (obj === null) return true;\n    if (_.is(obj, 'Array')) return obj.length == 0;\n    for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            return false;\n        }\n    }\n    return true\n};\n\n_.normalize = _;\n","/home/travis/build/npmtest/node-npmtest-fis/node_modules/fis-kernel/lib/uri.js":"/*\n * fis\n * http://fis.baidu.com/\n */\n\n'use strict';\n\nfunction replaceDefine(value, escape){\n    return value.replace(/\\$\\{([^\\}]+)\\}/g, function(all, $1){\n        var val = fis.config.get($1);\n        if(typeof val === 'undefined'){\n            fis.log.error('undefined property [' + $1 + '].');\n        } else {\n            return escape ? fis.util.escapeReg(val) : val;\n        }\n        return all;\n    });\n}\n\nfunction replaceMatches(value, matches){\n    return value.replace(/\\$(\\d+|&)/g, function(all, $1){\n        var key = $1 === '&' ? '0' : $1;\n        return matches.hasOwnProperty(key) ? (matches[key] || '') : all;\n    });\n}\n\nfunction replaceProperties(source, matches, target){\n    var type = typeof source;\n    if(type === 'object'){\n        if(fis.util.is(source, 'Array')){\n            target = target || [];\n        } else {\n            target = target || {};\n        }\n        fis.util.map(source, function(key, value){\n            target[key] = replaceProperties(value, matches);\n        });\n        return target;\n    } else if(type === 'string'){\n        return replaceDefine(replaceMatches(source, matches));\n// TODO support function type\n//    } else if(type === 'function'){\n//        return source(subpath || target.subpath, matches);\n    } else {\n        return source;\n    }\n}\n\nfunction roadmap(subpath, path, obj){\n    var map = fis.config.get('roadmap.' + path, []);\n    for(var i = 0, len = map.length; i < len; i++){\n        var opt = map[i], reg = opt.reg;\n        if(reg){\n            if(typeof reg === 'string'){\n                reg = fis.util.glob(replaceDefine(reg, true));\n            } else if(!fis.util.is(reg, 'RegExp')){\n                fis.log.error('invalid regexp [' + reg + '] of [roadmap.' + path + '.' + i + ']');\n            }\n            var matches = subpath.match(reg);\n            if(matches){\n                obj = obj || {};\n                replaceProperties(opt, matches, obj);\n                delete obj.reg;\n                return obj;\n            }\n        } else {\n            fis.log.error('[roadmap.' + path + '.' + i + '] missing property [reg].');\n        }\n    }\n    return false;\n}\n\nvar uri = module.exports = function(path, dirname){\n    var info = fis.util.stringQuote(path),\n        qInfo = fis.util.query(info.rest);\n    info.query = qInfo.query;\n    info.hash = qInfo.hash;\n    info.rest = qInfo.rest;\n    if(info.rest){\n        path = info.rest;\n        if(path.indexOf(':') === -1){\n            var file;\n            if(path[0] === '/'){\n                file = fis.project.getProjectPath(path);\n            } else if(dirname) {\n                file = fis.util(dirname, path);\n            } else {\n                fis.log.error('invalid dirname.');\n            }\n\n            var root = fis.project.getProjectPath();\n            if(file && fis.util.isFile(file) && file.indexOf(root) === 0){\n                info.file = fis.file(file);\n            } \n        }\n    }\n    return info;\n};\n\nuri.getId = function(path, dirname){\n    var info = uri(path, dirname);\n    if(info.file){\n        info.id = info.file.getId();\n    } else {\n        info.id = info.rest;\n    }\n    return info;\n};\n\nuri.replaceDefine = replaceDefine;\nuri.replaceMatches = replaceMatches;\nuri.replaceProperties = replaceProperties;\nuri.roadmap = roadmap;\n","/home/travis/build/npmtest/node-npmtest-fis/node_modules/fis-kernel/lib/project.js":"/*\n * fis\n * http://fis.baidu.com/\n */\n\n'use strict';\n\nexports.DEFAULT_REMOTE_REPOS = 'http://fis.baidu.com/repos';\n\nexports.getSource = function(){\n    var root = exports.getProjectPath(),\n        source = {},\n        project_exclude = /^(\\/output\\b|\\/fis-[^\\/]+)$/,\n        include = fis.config.get('project.include'),\n        exclude = fis.config.get('project.exclude');\n    if (fis.util.is(exclude, 'Array')){\n        project_exclude = [project_exclude].concat(exclude);\n    }else if (exclude){\n        project_exclude = [project_exclude, exclude];\n    }\n    fis.util.find(root, include, project_exclude, root).forEach(function(file){\n        file = fis.file(file);\n        if (file.release) {\n            source[file.subpath] = file;\n        }\n    });\n    return source;\n};\n\n//paths\nvar PROJECT_ROOT;\nvar TEMP_ROOT;\n\nfunction getPath(root, args){\n    if(args && args.length > 0){\n        args = root + '/' + Array.prototype.join.call(args, '/');\n        return fis.util(args);\n    } else {\n        return fis.util(root);\n    }\n}\n\nfunction initDir(path, title){\n    if(fis.util.exists(path)){\n        if(!fis.util.isDir(path)){\n            fis.log.error('unable to set path[' + path + '] as ' + title + ' directory.');\n        }\n    } else {\n        fis.util.mkdir(path);\n    }\n    path = fis.util.realpath(path);\n    if(path){\n        return path;\n    } else {\n        fis.log.error('unable to create dir [' + path + '] for ' + title + ' directory.');\n    }\n}\n\nexports.getProjectPath = function(){\n    if(PROJECT_ROOT){\n        return getPath(PROJECT_ROOT, arguments);\n    } else {\n        fis.log.error('undefined project root');\n    }\n};\n\nexports.setProjectRoot = function(path){\n    if(fis.util.isDir(path)){\n        PROJECT_ROOT = fis.util.realpath(path);\n    } else {\n        fis.log.error('invalid project root path [' + path + ']');\n    }\n};\n\nexports.setTempRoot = function(tmp){\n    TEMP_ROOT = initDir(tmp);\n};\n\nexports.getTempPath = function(){\n    if(!TEMP_ROOT){\n        var list = ['FIS_TEMP_DIR', 'LOCALAPPDATA', 'APPDATA', 'HOME'];\n        var name = fis.cli && fis.cli.name ? fis.cli.name : 'fis';\n        var tmp;\n        for(var i = 0, len = list.length; i < len; i++){\n            if(tmp = process.env[list[i]]){\n                break;\n            }\n        }\n        tmp = tmp || __dirname + '/../';\n        exports.setTempRoot(tmp + '/.' + name + '-tmp');\n    }\n    return getPath(TEMP_ROOT, arguments);\n};\n\nexports.getCachePath = function(){\n    return getPath(exports.getTempPath('cache'), arguments);\n};\n","/home/travis/build/npmtest/node-npmtest-fis/node_modules/fis-kernel/lib/file.js":"/*\n * fis\n * http://fis.baidu.com/\n */\n\n'use strict';\n\nfunction getReleaseExt(ext){\n    if(ext){\n        var rExt = fis.config.get('roadmap.ext' + ext);\n        if(rExt){\n            ext = normalizeExt(rExt);\n        }\n    }\n    return ext;\n}\n\nfunction normalizeExt(ext){\n    if(ext[0] !== '.'){\n        ext = '.' + ext;\n    }\n    return ext;\n}\n\nfunction normalizePath(path, reg, rExt){\n    return path\n        .replace(reg, '')\n        .replace(/[:*?\"<>|]/g, '_') + rExt;\n}\n\nfunction addHash(path, file){\n    var rExt  = file.rExt,\n        qRExt = fis.util.escapeReg(rExt),\n        qExt = fis.util.escapeReg(file.ext),\n        hash = file.getHash(),\n        onnector = fis.config.get('project.md5Connector', '_'),\n        reg = new RegExp(qRExt + '$|' + qExt + '$', 'i');\n    return path.replace(reg, '') + onnector + hash + rExt;\n}\n\nfunction getDomainsByPath(path){\n    var domain = fis.config.get('roadmap.domain', {}), value = [];\n    if(typeof domain === 'string'){\n        value = domain.split(/\\s*,\\s*/);\n    } else if(fis.util.is(domain, 'Array')) {\n        value = domain;\n    } else {\n        fis.util.map(domain, function(pattern, domain){\n            if((pattern === 'image' && fis.util.isImageFile(path)) || fis.util.glob(pattern, path)){\n                if(typeof domain === 'string'){\n                    value = domain.split(/\\s*,\\s*/);\n                } else if(fis.util.is(domain, 'Array')){\n                    value = domain;\n                } else {\n                    fis.log.warning('invalid domain [' + domain + '] of [roadmap.domain.' + pattern + ']');\n                }\n                return true;\n            }\n        });\n    }\n    return value;\n}\n\n\nfunction getDomain(path){\n    var hash = fis.util.md5(path),\n        domains = getDomainsByPath(path),\n        len = domains.length,\n        domain = '';\n    if(len){\n        domain = domains[hash.charCodeAt(0) % len];\n    }\n    return domain;\n}\n\nvar File = Object.derive(function(){\n    var _ = fis.util,\n        info = _.pathinfo(arguments);\n    _.map(info, this, true);\n    var ext = info.ext,\n        rExt = this.rExt = getReleaseExt(ext),\n        realpath = this.realpath = _.realpathSafe(info.fullname),\n        realpathNoExt = this.realpathNoExt = info.rest,\n        root = fis.project.getProjectPath();\n\n    this.useCompile = true;\n    this.useDomain = false;\n    this.useCache = true;\n    this.useHash = false;\n    this.useMap = false;\n\n    this._isImage = true;\n    this._isText = false;\n    this.isMod = false;\n\n    this.requires = [];\n    this.extras = {};\n\n    this._likes = {};\n    var likes = ['isHtmlLike', 'isJsLike', 'isCssLike'];\n    var props = {};\n\n    likes.forEach(function (v) {\n        props[v] = {\n            set: (function (prop) {\n                return function (val) {\n\n                    if (val === false) {\n                        this._likes[v] = false;\n                        return;\n                    }\n\n                    var that = this;\n                    likes.forEach(function (v) {\n                        if (prop === v) {\n                            that._likes[v] = true\n                        } else {\n                            that._likes[v] = false;\n                        }\n                    });\n                }\n            })(v),\n            get: (function(prop) {\n                return function () {\n                    return this._likes[prop];\n                };\n            })(v)\n        };\n    });\n\n    Object.defineProperties(this, props);\n\n    if(_.isTextFile(rExt)) {\n        this._isImage = false;\n        this._isText = true;\n        this.charset = null;\n        switch(rExt){\n            case '.js':\n            case '.jsx':\n            case '.coffee':\n                this.isJsLike = true;\n                this.useDomain = true;\n                this.useHash = true;\n                this.useMap = true;\n                break;\n            case '.css':\n            case '.less':\n            case '.sass':\n            case '.styl':\n            case '.scss':\n                this.isCssLike = true;\n                this.useDomain = true;\n                this.useHash = true;\n                this.useMap = true;\n                break;\n            case '.html':\n            case '.xhtml':\n            case '.shtml':\n            case '.htm':\n            case '.tpl':   //smarty template\n            case '.ftl':   //freemarker template\n            case '.vm':    //velocity template\n            case '.php':\n            case '.jsp':\n            case '.asp':\n            case '.aspx':\n            case '.ascx':\n            case '.cshtml':\n            case '.master':\n                this.isHtmlLike = true;\n                break;\n            case '.json':\n                this.isJsonLike = true;\n                break;\n        }\n    } else if(_.isImageFile(rExt)) {\n        this.useDomain = true;\n        this.useHash = rExt !== '.ico';\n    } else {\n        this.useCompile = false;\n    }\n\n    if(realpath.indexOf(root) === 0){\n        //subpath\n        var len = root.length, subpath;\n        this.subpath = subpath = realpath.substring(len);\n        this.subdirname = info.dirname.substring(len);\n        this.subpathNoExt = realpathNoExt.substring(len);\n\n        //roadmap\n        fis.uri.roadmap(subpath, 'path', this);\n\n        //release\n        if(this.release === false){\n            this.useMap = false;\n            var self = this;\n            Object.defineProperty(this, 'url', {\n                enumerable : true,\n                get : function(){\n                    fis.log.error('unreleasable file [' + self.realpath + ']');\n                }\n            });\n        } else {\n            this.useMap = this.isMod ? true : this.useMap;\n            //release & url\n            var reg = new RegExp(_.escapeReg(ext) + '$|' + _.escapeReg(rExt) + '$', 'i');\n            var release;\n            if(this.release){\n                release = this.release.replace(/[\\/\\\\]+/g, '/');\n                if(release[0] !== '/'){\n                    release = '/' + release;\n                }\n            } else {\n                release = this.subpath;\n            }\n            this.release = normalizePath(release, reg, rExt);\n            this.url = this.url ? normalizePath(this.url, reg, rExt) : this.release;\n        }\n\n        //charset\n        if(this._isText){\n            this.charset = (\n                this.charset || fis.config.get('project.charset', 'utf8')\n            ).toLowerCase();\n        }\n\n        //file id\n        var id = this.id || subpath.replace(/^\\//, '');\n        var ns = this.namespace || fis.config.get('namespace');\n        if(ns) {\n            id = ns + fis.config.get('namespaceConnector', ':') + id;\n        }\n        this.id = id;\n    }\n}, {\n    exists : function(){\n        return fis.util.exists(this.realpath);\n    },\n    isText : function(){\n        return this._isText;\n    },\n    isImage : function(){\n        return this._isImage;\n    },\n    toString : function(){\n        return this.realpath;\n    },\n    getMtime : function(){\n        return fis.util.mtime(this.realpath);\n    },\n    isFile : function(){\n        return fis.util.isFile(this.realpath);\n    },\n    isDir : function(){\n        return fis.util.isDir(this.realpath);\n    },\n    setContent : function(c){\n        this._content = c;\n        return this;\n    },\n    getContent : function(){\n        if(typeof this._content === 'undefined'){\n            this._content = fis.util.read(this.realpath, this.isText());\n        }\n        return this._content;\n    },\n    getHash : function(){\n        if(typeof this._md5 === 'undefined'){\n            Object.defineProperty(this, '_md5', {\n                value : fis.util.md5(this.getContent()),\n                writable : false\n            });\n        }\n        return this._md5;\n    },\n    getBase64 : function(prefix){\n        prefix = typeof prefix === 'undefined' ? true : prefix;\n        if(prefix){\n            prefix = 'data:' + fis.util.getMimeType(this.rExt) + ';base64,';\n        } else {\n            prefix = '';\n        }\n        return prefix + fis.util.base64(this._content);\n    },\n    getId : function(){\n        return this.id;\n    },\n    getUrl : function(withHash, withDomain){\n        var url = this.url;\n        if(withHash && this.useHash){\n            url = addHash(url, this);\n        }\n        if(withDomain && this.useDomain){\n            if(typeof this.domain === 'undefined'){\n                this.domain = getDomain(this.subpath);\n            }\n            url = this.domain + url;\n        }\n        return url + this.query;\n    },\n    getHashRelease : function(release){\n        release = release || this.release;\n        if(release){\n            if(this.useHash){\n                return addHash(release, this);\n            } else {\n                return release;\n            }\n        } else {\n            fis.log.error('unreleasable file [' + this.realpath + ']');\n        }\n    },\n    addRequire : function(id){\n        if(id && (id = id.trim())){\n            if(this.requires.indexOf(id) < 0){\n                this.requires.push(id);\n            }\n            return id;\n        }\n        return false;\n    },\n    addSameNameRequire : function(ext){\n        var path;\n        if(fis.util.isFile(this.realpathNoExt + ext)){\n            path = './' + this.filename + ext;\n        } else {\n            var map = fis.config.get('roadmap.ext');\n            for(var key in map){\n                if(map.hasOwnProperty(key)){\n                    var oExt = normalizeExt(key);\n                    var rExt = normalizeExt(map[key]);\n                    if(rExt === ext && fis.util.isFile(this.realpathNoExt + oExt)) {\n                        path = './' + this.filename + oExt;\n                        break;\n                    }\n                }\n            }\n        }\n        if(path){\n            var info = fis.uri.getId(path, this.dirname);\n            if(info.file && info.file.useMap){\n                this.addRequire(info.id);\n            }\n        }\n    },\n    removeRequire : function(id){\n        var pos = this.requires.indexOf(id);\n        if(pos > -1){\n            this.requires.splice(pos, 1);\n        }\n    }\n});\n\nmodule.exports = File.factory();\nmodule.exports.wrap = function(file){\n    if(typeof file === 'string'){\n        return new File(file);\n    } else if(file instanceof File){\n        return file;\n    } else {\n        fis.log.error('unable to convert [' + (typeof file) + '] to [File] object.');\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-fis/node_modules/fis-kernel/lib/cache.js":"/*\n * fis\n * http://fis.baidu.com/\n */\n\n'use strict';\n\nvar Cache = Object.derive(function(path, dir){\n    var file = fis.util.realpath(path);\n    if(!fis.util.isFile(file)){\n        fis.log.error('unable to cache file[' + path + ']: No such file.');\n    }\n    this.timestamp = fis.util.mtime(file).getTime();\n    this.deps = {};\n    this.version = fis.version;\n\n    var info = fis.util.pathinfo(file);\n    var basename = fis.project.getCachePath(dir, info.basename);\n    var hash = fis.util.md5(file, 10);\n    this.cacheFile = basename + '-c-' + hash + '.tmp';\n    this.cacheInfo = basename + '-o-' + hash + '.json';\n}, {\n    save : function(content, info){\n        var infos = {\n            version : this.version,\n            timestamp : this.timestamp,\n            deps : this.deps,\n            info : info\n        };\n        fis.util.write(this.cacheInfo, JSON.stringify(infos));\n        fis.util.write(this.cacheFile, content);\n    },\n    revert : function(file){\n        fis.log.debug('revert cache');\n        if(\n            exports.enable\n            && fis.util.exists(this.cacheInfo)\n            && fis.util.exists(this.cacheFile)\n        ){\n            fis.log.debug('cache file exists');\n            var infos = fis.util.readJSON(this.cacheInfo);\n            fis.log.debug('cache info read');\n            if(infos.version == this.version && infos.timestamp == this.timestamp){\n                var deps = infos['deps'];\n                for(var f in deps){\n                    if(deps.hasOwnProperty(f)){\n                        var d = fis.util.mtime(f);\n                        if(d == 0 || deps[f] != d.getTime()){\n                            fis.log.debug('cache is expired');\n                            return false;\n                        }\n                    }\n                }\n                this.deps = deps;\n                fis.log.debug('cache is valid');\n                if(file){\n                    file.info = infos.info;\n                    file.content = fis.util.fs.readFileSync(this.cacheFile);\n                }\n                fis.log.debug('revert cache finished');\n                return true;\n            }\n        }\n        fis.log.debug('cache is expired');\n        return false;\n    },\n    addDeps : function(file){\n        var path = fis.util.realpath(file);\n        if(path){\n            this.deps[path] = fis.util.mtime(path).getTime();\n        } else {\n            fis.log.warning('unable to add dependency file[' + file + ']: No such file.');\n        }\n        return this;\n    },\n    removeDeps : function(file){\n        var path = fis.util.realpath(file);\n        if(path && this.deps[path]){\n            delete this.deps[path];\n        }\n        return this;\n    },\n    mergeDeps : function(cache){\n        var deps = {};\n        if(cache instanceof Cache){\n            deps = cache.deps\n        } else if(typeof cache === 'object'){\n            deps = cache\n        } else {\n            fis.log.error('unable to merge deps of data[' + cache + ']');\n        }\n        fis.util.map(deps, this.deps, true);\n    }\n});\n\nexports = module.exports = Cache.factory();\nexports.enable = true;\nexports.Cache = Cache;\nexports.clean = function(name){\n    name = name || '';\n    var path = fis.project.getCachePath(name);\n    if(fis.util.exists(path)){\n        fis.util.del(path);\n    }\n};","/home/travis/build/npmtest/node-npmtest-fis/node_modules/fis-kernel/lib/compile.js":"/*\n * fis\n * http://fis.baidu.com/\n */\n\n'use strict';\n\nvar CACHE_DIR;\n\nvar exports = module.exports = function(file){\n    if(!CACHE_DIR){\n        fis.log.error('uninitialized compile cache directory.');\n    }\n    file = fis.file.wrap(file);\n    if(!file.realpath){\n        error('unable to compile [' + file.subpath + ']: Invalid file realpath.');\n    }\n    fis.log.debug('compile [' + file.realpath + '] start');\n    fis.emitter.emit('compile:start', file);\n    if(file.isFile()){\n        if(file.useCompile && file.ext && file.ext !== '.'){\n            var cache = file.cache = fis.cache(file.realpath, CACHE_DIR),\n                revertObj = {};\n            if(file.useCache && cache.revert(revertObj)){\n                exports.settings.beforeCacheRevert(file);\n                file.requires = revertObj.info.requires;\n                file.extras = revertObj.info.extras;\n                if(file.isText()){\n                    revertObj.content = revertObj.content.toString('utf8');\n                }\n                file.setContent(revertObj.content);\n                exports.settings.afterCacheRevert(file);\n            } else {\n                exports.settings.beforeCompile(file);\n                file.setContent(fis.util.read(file.realpath));\n                process(file);\n                exports.settings.afterCompile(file);\n                revertObj = {\n                    requires : file.requires,\n                    extras : file.extras\n                };\n                cache.save(file.getContent(), revertObj);\n            }\n        } else {\n            file.setContent(file.isText() ? fis.util.read(file.realpath) : fis.util.fs.readFileSync(file.realpath));\n        }\n    } else if(file.useCompile && file.ext && file.ext !== '.'){\n        process(file);\n    }\n    if(exports.settings.hash && file.useHash){\n        file.getHash();\n    }\n    file.compiled = true;\n    fis.log.debug('compile [' + file.realpath + '] end');\n    fis.emitter.emit('compile:end', file);\n    embeddedUnlock(file);\n    return file;\n};\n\nexports.settings = {\n    unique   : false,\n    debug    : false,\n    optimize : false,\n    lint     : false,\n    test     : false,\n    hash     : false,\n    domain   : false,\n    beforeCacheRevert : function(){},\n    afterCacheRevert : function(){},\n    beforeCompile : function(){},\n    afterCompile : function(){}\n};\n\nexports.setup = function(opt){\n    var settings = exports.settings;\n    if(opt){\n        fis.util.map(settings, function(key){\n            if(typeof opt[key] !== 'undefined'){\n                settings[key] = opt[key];\n            }\n        });\n    }\n    CACHE_DIR = 'compile/';\n    if(settings.unique){\n        CACHE_DIR = 'compile_' + Date.now() + '-' + Math.random();\n    } else {\n        CACHE_DIR += ''\n            + (settings.debug    ? 'debug'     : 'release')\n            + (settings.optimize ? '-optimize' : '')\n            + (settings.hash     ? '-hash'     : '')\n            + (settings.domain   ? '-domain'   : '');\n    }\n    return CACHE_DIR;\n};\n\nexports.clean = function(name){\n    if(name){\n        fis.cache.clean('compile/' + name);\n    } else if(CACHE_DIR) {\n        fis.cache.clean(CACHE_DIR);\n    } else {\n        fis.cache.clean('compile');\n    }\n};\n\nvar map = exports.lang = (function(){\n    var keywords = ['require', 'embed', 'uri', 'dep', 'jsEmbed'],\n        LD = '<<<', RD = '>>>',\n        qLd = fis.util.escapeReg(LD),\n        qRd = fis.util.escapeReg(RD),\n        map = {\n            reg : new RegExp(\n                qLd + '(' + keywords.join('|') + '):([\\\\s\\\\S]+?)' + qRd,\n                'g'\n            )\n        };\n    keywords.forEach(function(key){\n        map[key] = {};\n        map[key]['ld'] = LD + key + ':';\n        map[key]['rd'] = RD;\n    });\n    return map;\n})();\n\n//\"abc?__inline\" return true\n//\"abc?__inlinee\" return false\n//\"abc?a=1&__inline\"\" return true\nfunction isInline(info){\n    return /[?&]__inline(?:[=&'\"]|$)/.test(info.query);\n}\n\n//analyse [@require id] syntax in comment\nfunction analyseComment(comment, callback){\n    var reg = /(@require\\s+)('[^']+'|\"[^\"]+\"|[^\\s;!@#%^&*()]+)/g;\n    callback = callback || function(m, prefix, value){\n        return prefix + map.require.ld + value + map.require.rd;\n    };\n    return comment.replace(reg, callback);\n}\n\n//expand javascript\n//[@require id] in comment to require resource\n//__inline(path) to embedd resource content or base64 encodings\n//__uri(path) to locate resource\n//require(path) to require resource\nfunction extJs(content, callback){\n    var reg = /\"(?:[^\\\\\"\\r\\n\\f]|\\\\[\\s\\S])*\"|'(?:[^\\\\'\\n\\r\\f]|\\\\[\\s\\S])*'|(\\/\\/[^\\r\\n\\f]+|\\/\\*[\\s\\S]*?(?:\\*\\/|$))|\\b(__inline|__uri|require)\\s*\\(\\s*(\"(?:[^\\\\\"\\r\\n\\f]|\\\\[\\s\\S])*\"|'(?:[^\\\\'\\n\\r\\f]|\\\\[\\s\\S])*')\\s*\\)/g;\n    callback = callback || function(m, comment, type, value){\n        if(type){\n            switch (type){\n                case '__inline':\n                    m = map.jsEmbed.ld + value + map.jsEmbed.rd;\n                    break;\n                case '__uri':\n                    m = map.uri.ld + value + map.uri.rd;\n                    break;\n                case 'require':\n                    m = 'require(' + map.require.ld + value + map.require.rd + ')';\n                    break;\n            }\n        } else if(comment){\n            m = analyseComment(comment);\n        }\n        return m;\n    };\n    return content.replace(reg, callback);\n}\n\n//expand css\n//[@require id] in comment to require resource\n//[@import url(path?__inline)] to embed resource content\n//url(path) to locate resource\n//url(path?__inline) to embed resource content or base64 encodings\n//src=path to locate resource\nfunction extCss(content, callback){\n    var reg = /(\\/\\*[\\s\\S]*?(?:\\*\\/|$))|(?:@import\\s+)?\\burl\\s*\\(\\s*(\"(?:[^\\\\\"\\r\\n\\f]|\\\\[\\s\\S])*\"|'(?:[^\\\\'\\n\\r\\f]|\\\\[\\s\\S])*'|[^)}\\s]+)\\s*\\)(\\s*;?)|\\bsrc\\s*=\\s*(\"(?:[^\\\\\"\\r\\n\\f]|\\\\[\\s\\S])*\"|'(?:[^\\\\'\\n\\r\\f]|\\\\[\\s\\S])*'|[^\\s}]+)/g;\n    callback = callback || function(m, comment, url, last, filter){\n        if(url){\n            var key = isInline(fis.util.query(url)) ? 'embed' : 'uri';\n            if(m.indexOf('@') === 0){\n                if(key === 'embed'){\n                    m = map.embed.ld + url + map.embed.rd + last.replace(/;$/, '');\n                } else {\n                    m = '@import url(' + map.uri.ld + url + map.uri.rd + ')' + last;\n                }\n            } else {\n                m = 'url(' + map[key].ld + url + map[key].rd + ')' + last;\n            }\n        } else if(filter) {\n            m = 'src=' + map.uri.ld + filter + map.uri.rd;\n        } else if(comment) {\n            m = analyseComment(comment);\n        }\n        return m;\n    };\n    return content.replace(reg, callback);\n}\n\n//expand html\n//[@require id] in comment to require resource\n//<!--inline[path]--> to embed resource content\n//<img|embed|audio|video|link|object ... (data-)?src=\"path\"/> to locate resource\n//<img|embed|audio|video|link|object ... (data-)?src=\"path?__inline\"/> to embed resource content\n//<script|style ... src=\"path\"></script|style> to locate js|css resource\n//<script|style ... src=\"path?__inline\"></script|style> to embed js|css resource\n//<script|style ...>...</script|style> to analyse as js|css\nfunction extHtml(content, callback){\n    var reg = /(<script(?:(?=\\s)[\\s\\S]*?[\"'\\s\\w\\/\\-]>|>))([\\s\\S]*?)(?=<\\/script\\s*>|$)|(<style(?:(?=\\s)[\\s\\S]*?[\"'\\s\\w\\/\\-]>|>))([\\s\\S]*?)(?=<\\/style\\s*>|$)|<(img|embed|audio|video|link|object|source)\\s+[\\s\\S]*?[\"'\\s\\w\\/\\-](?:>|$)|<!--inline\\[([^\\]]+)\\]-->|<!--(?!\\[)([\\s\\S]*?)(-->|$)/ig;\n    callback = callback || function(m, $1, $2, $3, $4, $5, $6, $7, $8){\n        if($1){//<script>\n            var embed = '';\n            $1 = $1.replace(/(\\s(?:data-)?src\\s*=\\s*)('[^']+'|\"[^\"]+\"|[^\\s\\/>]+)/ig, function(m, prefix, value){\n                if(isInline(fis.util.query(value))){\n                    embed += map.embed.ld + value + map.embed.rd;\n                    return '';\n                } else {\n                    return prefix + map.uri.ld + value + map.uri.rd;\n                }\n            });\n            if(embed){\n                //embed file\n                m = $1 + embed;\n            } else if(!/\\s+type\\s*=/i.test($1) || /\\s+type\\s*=\\s*(['\"]?)text\\/javascript\\1/i.test($1)) {\n                //without attrubite [type] or must be [text/javascript]\n                m = $1 + extJs($2);\n            } else {\n                //other type as html\n                m = $1 + extHtml($2);\n            }\n        } else if($3){//<style>\n            m = $3 + extCss($4);\n        } else if($5){//<img|embed|audio|video|link|object|source>\n            var tag = $5.toLowerCase();\n            if(tag === 'link'){\n                var inline = '', isCssLink = false, isImportLink = false;\n                var result = m.match(/\\srel\\s*=\\s*('[^']+'|\"[^\"]+\"|[^\\s\\/>]+)/i);\n                if(result && result[1]){\n                    var rel = result[1].replace(/^['\"]|['\"]$/g, '').toLowerCase();\n                    isCssLink = rel === 'stylesheet';\n                    isImportLink = rel === 'import';\n                }\n                m = m.replace(/(\\s(?:data-)?href\\s*=\\s*)('[^']+'|\"[^\"]+\"|[^\\s\\/>]+)/ig, function(_, prefix, value){\n                    if((isCssLink || isImportLink) && isInline(fis.util.query(value))){\n                        if(isCssLink) {\n                            inline += '<style' + m.substring(5).replace(/\\/(?=>$)/, '').replace(/\\s+(?:charset|href|data-href|hreflang|rel|rev|sizes|target)\\s*=\\s*(?:'[^']+'|\"[^\"]+\"|[^\\s\\/>]+)/ig, '');\n                        }\n                        inline += map.embed.ld + value + map.embed.rd;\n                        if(isCssLink) {\n                            inline += '</style>';\n                        }\n                        return '';\n                    } else {\n                        return prefix + map.uri.ld + value + map.uri.rd;\n                    }\n                });\n                m = inline || m;\n            } else if(tag === 'object'){\n                m = m.replace(/(\\sdata\\s*=\\s*)('[^']+'|\"[^\"]+\"|[^\\s\\/>]+)/ig, function(m, prefix, value){\n                    return prefix + map.uri.ld + value + map.uri.rd;\n                });\n            } else {\n                m = m.replace(/(\\s(?:data-)?src\\s*=\\s*)('[^']+'|\"[^\"]+\"|[^\\s\\/>]+)/ig, function(m, prefix, value){\n                    var key = isInline(fis.util.query(value)) ? 'embed' : 'uri';\n                    return prefix + map[key]['ld'] + value + map[key]['rd'];\n                });\n                if (tag == 'img') {\n                    //<img src=\"image-src.png\" srcset=\"image-1x.png 1x, image-2x.png 2x, image-3x.png 3x, image-4x.png 4x\">\n                    //http://www.webkit.org/demos/srcset/\n                    m = m.replace(/(\\ssrcset\\s*=\\s*)('[^']+'|\"[^\"]+\"|[^\\s\\/>]+)/ig, function(m, prefix, value){\n                        var info = fis.util.stringQuote(value);\n                        var set = info.rest.split(',');\n                        var imgset = [];\n                        set.forEach(function (item) {\n                            item = item.trim();\n                            var p = item.indexOf(' ');\n                            if (p == -1) {\n                                imgset.push(item);\n                                return;\n                            }\n                            imgset.push(map['uri']['ld'] + item.substr(0, p) + map['uri']['rd'] + item.substr(p));\n                        });\n                        return prefix + info.quote + imgset.join(', ') + info.quote;\n                    });\n                }\n            }\n        } else if($6){\n            m = map.embed.ld + $6 + map.embed.rd;\n        } else if($7){\n            m = '<!--' + analyseComment($7) + $8;\n        }\n        return m;\n    };\n    return content.replace(reg, callback);\n}\n\nfunction process(file){\n    if(file.useParser !== false){\n        pipe(file, 'parser', file.ext);\n    }\n    if(file.rExt){\n        if(file.usePreprocessor !== false){\n            pipe(file, 'preprocessor', file.rExt);\n        }\n        if(file.useStandard !== false){\n            standard(file);\n        }\n        if(file.usePostprocessor !== false){\n            pipe(file, 'postprocessor', file.rExt);\n        }\n        if(exports.settings.lint && file.useLint !== false){\n            pipe(file, 'lint', file.rExt, true);\n        }\n        if(exports.settings.test && file.useTest !== false){\n            pipe(file, 'test', file.rExt, true);\n        }\n        if(exports.settings.optimize && file.useOptimizer !== false){\n            pipe(file, 'optimizer', file.rExt);\n        }\n    }\n}\n\nfunction pipe(file, type, ext, keep){\n    var key = type + ext;\n    fis.util.pipe(key, function(processor, settings, key){\n        settings.filename = file.realpath;\n        var content = file.getContent();\n        try {\n            fis.log.debug('pipe [' + key + '] start');\n            var result = processor(content, file, settings);\n            fis.log.debug('pipe [' + key + '] end');\n            if(keep){\n                file.setContent(content);\n            } else if(typeof result === 'undefined'){\n                fis.log.warning('invalid content return of pipe [' + key + ']');\n            } else {\n                file.setContent(result);\n            }\n        } catch(e) {\n            //log error\n            fis.log.debug('pipe [' + key + '] fail');\n            var msg = key + ': ' + String(e.message || e.msg || e).trim() + ' [' + (e.filename || file.realpath);\n            if(e.hasOwnProperty('line')){\n                msg += ':' + e.line;\n                if(e.hasOwnProperty('col')){\n                    msg += ':' + e.col;\n                } else if(e.hasOwnProperty('column')) {\n                    msg += ':' + e.column;\n                }\n            }\n            msg += ']';\n            e.message = msg;\n            error(e);\n        }\n    });\n}\n\nvar embeddedMap = {};\n\nfunction error(msg){\n    //for watching, unable to exit\n    embeddedMap = {};\n    fis.log.error(msg);\n}\n\nfunction embeddedCheck(main, embedded){\n    main = fis.file.wrap(main).realpath;\n    embedded = fis.file.wrap(embedded).realpath;\n    if(main === embedded){\n        error('unable to embed file[' + main + '] into itself.');\n    } else if(embeddedMap[embedded]) {\n        var next = embeddedMap[embedded],\n            msg = [embedded];\n        while(next && next !== embedded){\n            msg.push(next);\n            next = embeddedMap[next];\n        }\n        msg.push(embedded);\n        error('circular dependency on [' + msg.join('] -> [') + '].');\n    }\n    embeddedMap[embedded] = main;\n    return true;\n}\n\nfunction embeddedUnlock(file){\n    delete embeddedMap[file.realpath];\n}\n\nfunction addDeps(a, b){\n    if(a && a.cache && b){\n        if(b.cache){\n            a.cache.mergeDeps(b.cache);\n        }\n        a.cache.addDeps(b.realpath || b);\n    }\n}\n\nfunction standard(file){\n    var path = file.realpath,\n        content = file.getContent();\n    if(typeof content === 'string'){\n        fis.log.debug('standard start');\n        //expand language ability\n        if(file.isHtmlLike){\n            content = extHtml(content);\n        } else if(file.isJsLike){\n            content = extJs(content);\n        } else if(file.isCssLike){\n            content = extCss(content);\n        }\n        content = content.replace(map.reg, function(all, type, value){\n            var ret = '', info;\n            try {\n                switch(type){\n                    case 'require':\n                        info = fis.uri.getId(value, file.dirname);\n                        file.addRequire(info.id);\n                        ret = info.quote + info.id + info.quote;\n                        break;\n                    case 'uri':\n                        info = fis.uri(value, file.dirname);\n                        if(info.file && info.file.isFile()){\n                            if(info.file.useHash && exports.settings.hash){\n                                if(embeddedCheck(file, info.file)){\n                                    exports(info.file);\n                                    addDeps(file, info.file);\n                                }\n                            }\n                            var query = (info.file.query && info.query) ? '&' + info.query.substring(1) : info.query;\n                            var url = info.file.getUrl(exports.settings.hash, exports.settings.domain);\n                            var hash = info.hash || info.file.hash;\n                            ret = info.quote + url + query + hash + info.quote;\n                        } else {\n                            ret = value;\n                        }\n                        break;\n                    case 'dep':\n                        if(file.cache){\n                            info = fis.uri(value, file.dirname);\n                            addDeps(file, info.file);\n                        } else {\n                            fis.log.warning('unable to add deps to file [' + path + ']');\n                        }\n                        break;\n                    case 'embed':\n                    case 'jsEmbed':\n                        info = fis.uri(value, file.dirname);\n                        var f;\n                        if(info.file){\n                            f = info.file;\n                        } else if(fis.util.isAbsolute(info.rest)){\n                            f = fis.file(info.rest);\n                        }\n                        if(f && f.isFile()){\n                            if(embeddedCheck(file, f)){\n                                exports(f);\n                                addDeps(file, f);\n                                f.requires.forEach(function(id){\n                                    file.addRequire(id);\n                                });\n                                if(f.isText()){\n                                    ret = f.getContent();\n                                    if(type === 'jsEmbed' && !f.isJsLike && !f.isJsonLike){\n                                        ret = JSON.stringify(ret);\n                                    }\n                                } else {\n                                    ret = info.quote + f.getBase64() + info.quote;\n                                }\n                            }\n                        } else {\n                            fis.log.error('unable to embed non-existent file [' + value + ']');\n                        }\n                        break;\n                    default :\n                        fis.log.error('unsupported fis language tag [' + type + ']');\n                }\n            } catch (e) {\n                embeddedMap = {};\n                e.message = e.message + ' in [' + file.subpath + ']';\n                throw  e;\n            }\n            return ret;\n        });\n        file.setContent(content);\n        fis.log.debug('standard end');\n    }\n}\n\nexports.extJs = extJs;\nexports.extCss = extCss;\nexports.extHtml = extHtml;\nexports.isInline = isInline;\nexports.analyseComment = analyseComment;\n","/home/travis/build/npmtest/node-npmtest-fis/node_modules/fis-kernel/lib/release.js":"/*\n * fis\n * http://fis.baidu.com/\n */\n\n'use strict';\n\n/**\n * @type {Function}\n * @param {Object} [opt]\n * @param {Function} callback\n * opt = {\n *     include : {RegExp} find include filter,\n *     exclude : {RegExp} find exclude filter,\n *     debug    : {Boolean} debug model,\n *     optimize : {Boolean} if optimize,\n *     pack     : {Boolean|String} if package,\n *     lint     : {Boolean} if lint,\n *     test     : {Boolean} if test,\n *     hash     : {Boolean} if with hash,\n *     domain   : {Boolean} if with domain,\n *     beforeEach : {Function} before compile each file callback,\n *     afterEach : {Function} after compile each file callback,\n *     beforePack : {Function} before pack file callback,\n *     afterPack : {Function} after pack file callback\n * }\n */\n\nvar exports = module.exports = function(opt, callback){\n    if(typeof opt === 'function'){\n        callback = opt;\n        opt = {};\n    } else {\n        opt = opt || {};\n    }\n    \n    var src = {};\n    if (Array.isArray(opt.srcCache) && opt.srcCache.length) {\n        opt.srcCache.forEach(function (path) {\n            if (!fis.util.isFile(path)) return;\n            var file = fis.file(path);\n            if (file.release) {\n                src[file.subpath] = file;\n            }\n        });\n    } else {\n        src = fis.project.getSource();\n    }\n\n    var ret = {\n        src : src,\n        ids : {},\n        pkg : {},\n        map : {\n            res : {},\n            pkg : {}\n        }\n    };\n    opt.hash = opt.md5 > 0;\n    fis.compile.setup(opt);\n    fis.util.map(ret.src, function(subpath, file){\n        if(opt.beforeEach) {\n            opt.beforeEach(file, ret);\n        }\n\n        file = fis.compile(file);\n\n        if(opt.afterEach) {\n            opt.afterEach(file, ret);\n        }\n\n        if(file.release && file.useMap) {\n            //add resource map\n            var id = file.getId();\n            ret.ids[id] = file;\n            if(file.isJsLike){\n                file.addSameNameRequire('.css');\n            } else if(file.isHtmlLike){\n                file.addSameNameRequire('.js');\n                file.addSameNameRequire('.css');\n            }\n            var res = ret.map.res[id] = {\n                uri  : file.getUrl(opt.hash, opt.domain),\n                type : file.rExt.replace(/^\\./, '')\n            };\n            for(var key in file.extras){\n                if(file.extras.hasOwnProperty(key)){\n                    res.extras = file.extras;\n                    break;\n                }\n            }\n            if(file.requires && file.requires.length){\n                res.deps = file.requires;\n            }\n        }\n    });\n    \n    //project root\n    var root = fis.project.getProjectPath();\n    \n    var ns = fis.config.get('namespace');\n    \n    //get pack config\n    var conf = fis.config.get('pack');\n    if(typeof conf === 'undefined'){\n        //from fis-pack.json\n        var file = root + '/fis-pack.json';\n        if(fis.util.isFile(file)){\n            fis.config.set('pack', conf = fis.util.readJSON(file));\n        }\n    }\n    \n    //package callback\n    var cb = function(packager, settings, key){\n        fis.log.debug('[' + key + '] start');\n        packager(ret, conf, settings, opt);\n        fis.log.debug('[' + key + '] end');\n    };\n    \n    //prepackage\n    fis.util.pipe('prepackager', cb, opt.prepackager);\n    \n    //package\n    if(opt.pack){\n        //package\n        fis.util.pipe('packager', cb, opt.packager);\n        //css sprites\n        fis.util.pipe('spriter', cb, opt.spriter);\n    }\n    \n    //postpackage\n    fis.util.pipe('postpackager', cb, opt.postpackager);\n    \n    //create map.json\n    var map = fis.file(root, (ns ? ns + '-' : '') + 'map.json');\n    if(map.release){\n        map.setContent(JSON.stringify(ret.map, null, opt.optimize ? null : 4));\n        ret.pkg[map.subpath] = map;\n    }\n    \n    //done\n    if(callback){\n        callback(ret);\n    }\n};"}